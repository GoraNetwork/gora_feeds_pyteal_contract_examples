# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "opt_in_assets(asset,application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "return_oracle_response(byte[])byte[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "handle_oracle_response(uint32,byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "send_classic_oracle_request(uint64,byte[],(uint32,byte[][],uint32)[],uint64,byte[],uint32,byte[],(byte[],uint64)[],uint64[],uint64[],address[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "send_custom_oracle_request(uint64,byte[],(byte[],byte[],byte[],byte[],uint32,uint8,uint8,byte[],byte[],byte[],uint32,uint32)[],uint64,byte[],uint32,byte[],(byte[],uint64)[],uint64[],uint64[],address[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "send_offchain_oracle_request(uint64,byte[],(uint32,uint8,byte[],byte[][],byte[],byte[],uint32,uint32)[],uint64,byte[],uint32,byte[],(byte[],uint64)[],uint64[],uint64[],address[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "CustomeGoraRequester",
        "methods": [
            {
                "name": "opt_in_assets",
                "args": [
                    {
                        "type": "asset",
                        "name": "gora_token_reference"
                    },
                    {
                        "type": "application",
                        "name": "gora_app_reference"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "OPTIN THE CONTRACT TO THE NATIVE TOKEN AND GORA CONTRACT"
            },
            {
                "name": "return_oracle_response",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "user_data"
                    }
                ],
                "returns": {
                    "type": "byte[]"
                },
                "desc": "READ THE ORACLE RESPONSE,\nTHIS USES THE USER DATA AS THE KEY TO THE BOX BECAUSE WE USED THE USER  DATA AS THE KEY TO THE BOX WHEN SAVING THE ORACLE REPONSE ."
            },
            {
                "name": "handle_oracle_response",
                "args": [
                    {
                        "type": "uint32",
                        "name": "resp_type"
                    },
                    {
                        "type": "byte[]",
                        "name": "resp_body_bytes"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "THIS IS A SAMPLE DESTINATION METHOD, THIS SHOWS HOW THE RESPONSE FROM THE\nORACLE CAN BE SAVED/USED IN A SMART CONTRACT.  IN OUR CASE WE ONLY SAVE THE RESPONSE TO THE SMART CONTRACT\nUSING A BOX STORAGE INSTEAD OF USING A LOCAL OR GLOBAL STORAGE, GIVES US THE FREEDOM TO RETURN ENTIRE JSON RESPONSE INSTEAD OF JUST A SINGLE JSON DATA VALU"
            },
            {
                "name": "send_classic_oracle_request",
                "args": [
                    {
                        "type": "uint64",
                        "name": "request_type"
                    },
                    {
                        "type": "byte[]",
                        "name": "request_key"
                    },
                    {
                        "type": "(uint32,byte[][],uint32)[]",
                        "name": "sourceSpec"
                    },
                    {
                        "type": "uint64",
                        "name": "destination_app_id"
                    },
                    {
                        "type": "byte[]",
                        "name": "destination_method"
                    },
                    {
                        "type": "uint32",
                        "name": "aggregation_number"
                    },
                    {
                        "type": "byte[]",
                        "name": "user_data"
                    },
                    {
                        "type": "(byte[],uint64)[]",
                        "name": "box_references"
                    },
                    {
                        "type": "uint64[]",
                        "name": "app_references"
                    },
                    {
                        "type": "uint64[]",
                        "name": "asset_references"
                    },
                    {
                        "type": "address[]",
                        "name": "account_references"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Make an classic oracle request with specified parameters.\nThis type of request are requests sent to the gora oracle for results from the oracle."
            },
            {
                "name": "send_custom_oracle_request",
                "args": [
                    {
                        "type": "uint64",
                        "name": "request_type"
                    },
                    {
                        "type": "byte[]",
                        "name": "request_key"
                    },
                    {
                        "type": "(byte[],byte[],byte[],byte[],uint32,uint8,uint8,byte[],byte[],byte[],uint32,uint32)[]",
                        "name": "sourceSpec"
                    },
                    {
                        "type": "uint64",
                        "name": "destination_app_id"
                    },
                    {
                        "type": "byte[]",
                        "name": "destination_method"
                    },
                    {
                        "type": "uint32",
                        "name": "aggregation_number"
                    },
                    {
                        "type": "byte[]",
                        "name": "user_data"
                    },
                    {
                        "type": "(byte[],uint64)[]",
                        "name": "box_references"
                    },
                    {
                        "type": "uint64[]",
                        "name": "app_references"
                    },
                    {
                        "type": "uint64[]",
                        "name": "asset_references"
                    },
                    {
                        "type": "address[]",
                        "name": "account_references"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Make an custom oracle request with specified parameters.\nThis type of request are requests sent to a custom url/api for results,  this url/api can include anything or it might even be a webpage."
            },
            {
                "name": "send_offchain_oracle_request",
                "args": [
                    {
                        "type": "uint64",
                        "name": "request_type"
                    },
                    {
                        "type": "byte[]",
                        "name": "request_key"
                    },
                    {
                        "type": "(uint32,uint8,byte[],byte[][],byte[],byte[],uint32,uint32)[]",
                        "name": "sourceSpec"
                    },
                    {
                        "type": "uint64",
                        "name": "destination_app_id"
                    },
                    {
                        "type": "byte[]",
                        "name": "destination_method"
                    },
                    {
                        "type": "uint32",
                        "name": "aggregation_number"
                    },
                    {
                        "type": "byte[]",
                        "name": "user_data"
                    },
                    {
                        "type": "(byte[],uint64)[]",
                        "name": "box_references"
                    },
                    {
                        "type": "uint64[]",
                        "name": "app_references"
                    },
                    {
                        "type": "uint64[]",
                        "name": "asset_references"
                    },
                    {
                        "type": "address[]",
                        "name": "account_references"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Make an offchain oracle request with specified parameters.\nThis type of request are requests sent to an off-chain service for results,"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE",
        "opt_in": "CALL"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class OptInAssetsArgs(_ArgsBase[None]):
    """OPTIN THE CONTRACT TO THE NATIVE TOKEN AND GORA CONTRACT"""

    gora_token_reference: int
    gora_app_reference: int

    @staticmethod
    def method() -> str:
        return "opt_in_assets(asset,application)void"


@dataclasses.dataclass(kw_only=True)
class ReturnOracleResponseArgs(_ArgsBase[bytes | bytearray]):
    """READ THE ORACLE RESPONSE,
    THIS USES THE USER DATA AS THE KEY TO THE BOX BECAUSE WE USED THE USER  DATA AS THE KEY TO THE BOX WHEN SAVING THE ORACLE REPONSE ."""

    user_data: bytes | bytearray

    @staticmethod
    def method() -> str:
        return "return_oracle_response(byte[])byte[]"


@dataclasses.dataclass(kw_only=True)
class HandleOracleResponseArgs(_ArgsBase[None]):
    """THIS IS A SAMPLE DESTINATION METHOD, THIS SHOWS HOW THE RESPONSE FROM THE
    ORACLE CAN BE SAVED/USED IN A SMART CONTRACT.  IN OUR CASE WE ONLY SAVE THE RESPONSE TO THE SMART CONTRACT
    USING A BOX STORAGE INSTEAD OF USING A LOCAL OR GLOBAL STORAGE, GIVES US THE FREEDOM TO RETURN ENTIRE JSON RESPONSE INSTEAD OF JUST A SINGLE JSON DATA VALU"""

    resp_type: int
    resp_body_bytes: bytes | bytearray

    @staticmethod
    def method() -> str:
        return "handle_oracle_response(uint32,byte[])void"


@dataclasses.dataclass(kw_only=True)
class SendClassicOracleRequestArgs(_ArgsBase[None]):
    """Make an classic oracle request with specified parameters.
    This type of request are requests sent to the gora oracle for results from the oracle."""

    request_type: int
    request_key: bytes | bytearray
    sourceSpec: list[tuple[int, list[bytes | bytearray], int]]
    destination_app_id: int
    destination_method: bytes | bytearray
    aggregation_number: int
    user_data: bytes | bytearray
    box_references: list[tuple[bytes | bytearray, int]]
    app_references: list[int]
    asset_references: list[int]
    account_references: list[str]

    @staticmethod
    def method() -> str:
        return "send_classic_oracle_request(uint64,byte[],(uint32,byte[][],uint32)[],uint64,byte[],uint32,byte[],(byte[],uint64)[],uint64[],uint64[],address[])void"


@dataclasses.dataclass(kw_only=True)
class SendCustomOracleRequestArgs(_ArgsBase[None]):
    """Make an custom oracle request with specified parameters.
    This type of request are requests sent to a custom url/api for results,  this url/api can include anything or it might even be a webpage."""

    request_type: int
    request_key: bytes | bytearray
    sourceSpec: list[tuple[bytes | bytearray, bytes | bytearray, bytes | bytearray, bytes | bytearray, int, int, int, bytes | bytearray, bytes | bytearray, bytes | bytearray, int, int]]
    destination_app_id: int
    destination_method: bytes | bytearray
    aggregation_number: int
    user_data: bytes | bytearray
    box_references: list[tuple[bytes | bytearray, int]]
    app_references: list[int]
    asset_references: list[int]
    account_references: list[str]

    @staticmethod
    def method() -> str:
        return "send_custom_oracle_request(uint64,byte[],(byte[],byte[],byte[],byte[],uint32,uint8,uint8,byte[],byte[],byte[],uint32,uint32)[],uint64,byte[],uint32,byte[],(byte[],uint64)[],uint64[],uint64[],address[])void"


@dataclasses.dataclass(kw_only=True)
class SendOffchainOracleRequestArgs(_ArgsBase[None]):
    """Make an offchain oracle request with specified parameters.
    This type of request are requests sent to an off-chain service for results,"""

    request_type: int
    request_key: bytes | bytearray
    sourceSpec: list[tuple[int, int, bytes | bytearray, list[bytes | bytearray], bytes | bytearray, bytes | bytearray, int, int]]
    destination_app_id: int
    destination_method: bytes | bytearray
    aggregation_number: int
    user_data: bytes | bytearray
    box_references: list[tuple[bytes | bytearray, int]]
    app_references: list[int]
    asset_references: list[int]
    account_references: list[str]

    @staticmethod
    def method() -> str:
        return "send_offchain_oracle_request(uint64,byte[],(uint32,uint8,byte[],byte[][],byte[],byte[],uint32,uint32)[],uint64,byte[],uint32,byte[],(byte[],uint64)[],uint64[],uint64[],address[])void"


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def opt_in_assets(
        self,
        *,
        gora_token_reference: int,
        gora_app_reference: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """OPTIN THE CONTRACT TO THE NATIVE TOKEN AND GORA CONTRACT
        
        Adds a call to `opt_in_assets(asset,application)void` ABI method
        
        :param int gora_token_reference: The `gora_token_reference` ABI parameter
        :param int gora_app_reference: The `gora_app_reference` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = OptInAssetsArgs(
            gora_token_reference=gora_token_reference,
            gora_app_reference=gora_app_reference,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def return_oracle_response(
        self,
        *,
        user_data: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """READ THE ORACLE RESPONSE,
        THIS USES THE USER DATA AS THE KEY TO THE BOX BECAUSE WE USED THE USER  DATA AS THE KEY TO THE BOX WHEN SAVING THE ORACLE REPONSE .
        
        Adds a call to `return_oracle_response(byte[])byte[]` ABI method
        
        :param bytes | bytearray user_data: The `user_data` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ReturnOracleResponseArgs(
            user_data=user_data,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def handle_oracle_response(
        self,
        *,
        resp_type: int,
        resp_body_bytes: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """THIS IS A SAMPLE DESTINATION METHOD, THIS SHOWS HOW THE RESPONSE FROM THE
        ORACLE CAN BE SAVED/USED IN A SMART CONTRACT.  IN OUR CASE WE ONLY SAVE THE RESPONSE TO THE SMART CONTRACT
        USING A BOX STORAGE INSTEAD OF USING A LOCAL OR GLOBAL STORAGE, GIVES US THE FREEDOM TO RETURN ENTIRE JSON RESPONSE INSTEAD OF JUST A SINGLE JSON DATA VALU
        
        Adds a call to `handle_oracle_response(uint32,byte[])void` ABI method
        
        :param int resp_type: The `resp_type` ABI parameter
        :param bytes | bytearray resp_body_bytes: The `resp_body_bytes` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = HandleOracleResponseArgs(
            resp_type=resp_type,
            resp_body_bytes=resp_body_bytes,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def send_classic_oracle_request(
        self,
        *,
        request_type: int,
        request_key: bytes | bytearray,
        sourceSpec: list[tuple[int, list[bytes | bytearray], int]],
        destination_app_id: int,
        destination_method: bytes | bytearray,
        aggregation_number: int,
        user_data: bytes | bytearray,
        box_references: list[tuple[bytes | bytearray, int]],
        app_references: list[int],
        asset_references: list[int],
        account_references: list[str],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Make an classic oracle request with specified parameters.
        This type of request are requests sent to the gora oracle for results from the oracle.
        
        Adds a call to `send_classic_oracle_request(uint64,byte[],(uint32,byte[][],uint32)[],uint64,byte[],uint32,byte[],(byte[],uint64)[],uint64[],uint64[],address[])void` ABI method
        
        :param int request_type: The `request_type` ABI parameter
        :param bytes | bytearray request_key: The `request_key` ABI parameter
        :param list[tuple[int, list[bytes | bytearray], int]] sourceSpec: The `sourceSpec` ABI parameter
        :param int destination_app_id: The `destination_app_id` ABI parameter
        :param bytes | bytearray destination_method: The `destination_method` ABI parameter
        :param int aggregation_number: The `aggregation_number` ABI parameter
        :param bytes | bytearray user_data: The `user_data` ABI parameter
        :param list[tuple[bytes | bytearray, int]] box_references: The `box_references` ABI parameter
        :param list[int] app_references: The `app_references` ABI parameter
        :param list[int] asset_references: The `asset_references` ABI parameter
        :param list[str] account_references: The `account_references` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SendClassicOracleRequestArgs(
            request_type=request_type,
            request_key=request_key,
            sourceSpec=sourceSpec,
            destination_app_id=destination_app_id,
            destination_method=destination_method,
            aggregation_number=aggregation_number,
            user_data=user_data,
            box_references=box_references,
            app_references=app_references,
            asset_references=asset_references,
            account_references=account_references,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def send_custom_oracle_request(
        self,
        *,
        request_type: int,
        request_key: bytes | bytearray,
        sourceSpec: list[tuple[bytes | bytearray, bytes | bytearray, bytes | bytearray, bytes | bytearray, int, int, int, bytes | bytearray, bytes | bytearray, bytes | bytearray, int, int]],
        destination_app_id: int,
        destination_method: bytes | bytearray,
        aggregation_number: int,
        user_data: bytes | bytearray,
        box_references: list[tuple[bytes | bytearray, int]],
        app_references: list[int],
        asset_references: list[int],
        account_references: list[str],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Make an custom oracle request with specified parameters.
        This type of request are requests sent to a custom url/api for results,  this url/api can include anything or it might even be a webpage.
        
        Adds a call to `send_custom_oracle_request(uint64,byte[],(byte[],byte[],byte[],byte[],uint32,uint8,uint8,byte[],byte[],byte[],uint32,uint32)[],uint64,byte[],uint32,byte[],(byte[],uint64)[],uint64[],uint64[],address[])void` ABI method
        
        :param int request_type: The `request_type` ABI parameter
        :param bytes | bytearray request_key: The `request_key` ABI parameter
        :param list[tuple[bytes | bytearray, bytes | bytearray, bytes | bytearray, bytes | bytearray, int, int, int, bytes | bytearray, bytes | bytearray, bytes | bytearray, int, int]] sourceSpec: The `sourceSpec` ABI parameter
        :param int destination_app_id: The `destination_app_id` ABI parameter
        :param bytes | bytearray destination_method: The `destination_method` ABI parameter
        :param int aggregation_number: The `aggregation_number` ABI parameter
        :param bytes | bytearray user_data: The `user_data` ABI parameter
        :param list[tuple[bytes | bytearray, int]] box_references: The `box_references` ABI parameter
        :param list[int] app_references: The `app_references` ABI parameter
        :param list[int] asset_references: The `asset_references` ABI parameter
        :param list[str] account_references: The `account_references` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SendCustomOracleRequestArgs(
            request_type=request_type,
            request_key=request_key,
            sourceSpec=sourceSpec,
            destination_app_id=destination_app_id,
            destination_method=destination_method,
            aggregation_number=aggregation_number,
            user_data=user_data,
            box_references=box_references,
            app_references=app_references,
            asset_references=asset_references,
            account_references=account_references,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def send_offchain_oracle_request(
        self,
        *,
        request_type: int,
        request_key: bytes | bytearray,
        sourceSpec: list[tuple[int, int, bytes | bytearray, list[bytes | bytearray], bytes | bytearray, bytes | bytearray, int, int]],
        destination_app_id: int,
        destination_method: bytes | bytearray,
        aggregation_number: int,
        user_data: bytes | bytearray,
        box_references: list[tuple[bytes | bytearray, int]],
        app_references: list[int],
        asset_references: list[int],
        account_references: list[str],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Make an offchain oracle request with specified parameters.
        This type of request are requests sent to an off-chain service for results,
        
        Adds a call to `send_offchain_oracle_request(uint64,byte[],(uint32,uint8,byte[],byte[][],byte[],byte[],uint32,uint32)[],uint64,byte[],uint32,byte[],(byte[],uint64)[],uint64[],uint64[],address[])void` ABI method
        
        :param int request_type: The `request_type` ABI parameter
        :param bytes | bytearray request_key: The `request_key` ABI parameter
        :param list[tuple[int, int, bytes | bytearray, list[bytes | bytearray], bytes | bytearray, bytes | bytearray, int, int]] sourceSpec: The `sourceSpec` ABI parameter
        :param int destination_app_id: The `destination_app_id` ABI parameter
        :param bytes | bytearray destination_method: The `destination_method` ABI parameter
        :param int aggregation_number: The `aggregation_number` ABI parameter
        :param bytes | bytearray user_data: The `user_data` ABI parameter
        :param list[tuple[bytes | bytearray, int]] box_references: The `box_references` ABI parameter
        :param list[int] app_references: The `app_references` ABI parameter
        :param list[int] asset_references: The `asset_references` ABI parameter
        :param list[str] account_references: The `account_references` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SendOffchainOracleRequestArgs(
            request_type=request_type,
            request_key=request_key,
            sourceSpec=sourceSpec,
            destination_app_id=destination_app_id,
            destination_method=destination_method,
            aggregation_number=aggregation_number,
            user_data=user_data,
            box_references=box_references,
            app_references=app_references,
            asset_references=asset_references,
            account_references=account_references,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def opt_in_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a calls to the opt_in bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_opt_in(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class CustomeGoraRequesterClient:
    """A class for interacting with the CustomeGoraRequester app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        CustomeGoraRequesterClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def opt_in_assets(
        self,
        *,
        gora_token_reference: int,
        gora_app_reference: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """OPTIN THE CONTRACT TO THE NATIVE TOKEN AND GORA CONTRACT
        
        Calls `opt_in_assets(asset,application)void` ABI method
        
        :param int gora_token_reference: The `gora_token_reference` ABI parameter
        :param int gora_app_reference: The `gora_app_reference` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = OptInAssetsArgs(
            gora_token_reference=gora_token_reference,
            gora_app_reference=gora_app_reference,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def return_oracle_response(
        self,
        *,
        user_data: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[bytes | bytearray]:
        """READ THE ORACLE RESPONSE,
        THIS USES THE USER DATA AS THE KEY TO THE BOX BECAUSE WE USED THE USER  DATA AS THE KEY TO THE BOX WHEN SAVING THE ORACLE REPONSE .
        
        Calls `return_oracle_response(byte[])byte[]` ABI method
        
        :param bytes | bytearray user_data: The `user_data` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[bytes | bytearray]: The result of the transaction"""

        args = ReturnOracleResponseArgs(
            user_data=user_data,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def handle_oracle_response(
        self,
        *,
        resp_type: int,
        resp_body_bytes: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """THIS IS A SAMPLE DESTINATION METHOD, THIS SHOWS HOW THE RESPONSE FROM THE
        ORACLE CAN BE SAVED/USED IN A SMART CONTRACT.  IN OUR CASE WE ONLY SAVE THE RESPONSE TO THE SMART CONTRACT
        USING A BOX STORAGE INSTEAD OF USING A LOCAL OR GLOBAL STORAGE, GIVES US THE FREEDOM TO RETURN ENTIRE JSON RESPONSE INSTEAD OF JUST A SINGLE JSON DATA VALU
        
        Calls `handle_oracle_response(uint32,byte[])void` ABI method
        
        :param int resp_type: The `resp_type` ABI parameter
        :param bytes | bytearray resp_body_bytes: The `resp_body_bytes` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = HandleOracleResponseArgs(
            resp_type=resp_type,
            resp_body_bytes=resp_body_bytes,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def send_classic_oracle_request(
        self,
        *,
        request_type: int,
        request_key: bytes | bytearray,
        sourceSpec: list[tuple[int, list[bytes | bytearray], int]],
        destination_app_id: int,
        destination_method: bytes | bytearray,
        aggregation_number: int,
        user_data: bytes | bytearray,
        box_references: list[tuple[bytes | bytearray, int]],
        app_references: list[int],
        asset_references: list[int],
        account_references: list[str],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Make an classic oracle request with specified parameters.
        This type of request are requests sent to the gora oracle for results from the oracle.
        
        Calls `send_classic_oracle_request(uint64,byte[],(uint32,byte[][],uint32)[],uint64,byte[],uint32,byte[],(byte[],uint64)[],uint64[],uint64[],address[])void` ABI method
        
        :param int request_type: The `request_type` ABI parameter
        :param bytes | bytearray request_key: The `request_key` ABI parameter
        :param list[tuple[int, list[bytes | bytearray], int]] sourceSpec: The `sourceSpec` ABI parameter
        :param int destination_app_id: The `destination_app_id` ABI parameter
        :param bytes | bytearray destination_method: The `destination_method` ABI parameter
        :param int aggregation_number: The `aggregation_number` ABI parameter
        :param bytes | bytearray user_data: The `user_data` ABI parameter
        :param list[tuple[bytes | bytearray, int]] box_references: The `box_references` ABI parameter
        :param list[int] app_references: The `app_references` ABI parameter
        :param list[int] asset_references: The `asset_references` ABI parameter
        :param list[str] account_references: The `account_references` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SendClassicOracleRequestArgs(
            request_type=request_type,
            request_key=request_key,
            sourceSpec=sourceSpec,
            destination_app_id=destination_app_id,
            destination_method=destination_method,
            aggregation_number=aggregation_number,
            user_data=user_data,
            box_references=box_references,
            app_references=app_references,
            asset_references=asset_references,
            account_references=account_references,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def send_custom_oracle_request(
        self,
        *,
        request_type: int,
        request_key: bytes | bytearray,
        sourceSpec: list[tuple[bytes | bytearray, bytes | bytearray, bytes | bytearray, bytes | bytearray, int, int, int, bytes | bytearray, bytes | bytearray, bytes | bytearray, int, int]],
        destination_app_id: int,
        destination_method: bytes | bytearray,
        aggregation_number: int,
        user_data: bytes | bytearray,
        box_references: list[tuple[bytes | bytearray, int]],
        app_references: list[int],
        asset_references: list[int],
        account_references: list[str],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Make an custom oracle request with specified parameters.
        This type of request are requests sent to a custom url/api for results,  this url/api can include anything or it might even be a webpage.
        
        Calls `send_custom_oracle_request(uint64,byte[],(byte[],byte[],byte[],byte[],uint32,uint8,uint8,byte[],byte[],byte[],uint32,uint32)[],uint64,byte[],uint32,byte[],(byte[],uint64)[],uint64[],uint64[],address[])void` ABI method
        
        :param int request_type: The `request_type` ABI parameter
        :param bytes | bytearray request_key: The `request_key` ABI parameter
        :param list[tuple[bytes | bytearray, bytes | bytearray, bytes | bytearray, bytes | bytearray, int, int, int, bytes | bytearray, bytes | bytearray, bytes | bytearray, int, int]] sourceSpec: The `sourceSpec` ABI parameter
        :param int destination_app_id: The `destination_app_id` ABI parameter
        :param bytes | bytearray destination_method: The `destination_method` ABI parameter
        :param int aggregation_number: The `aggregation_number` ABI parameter
        :param bytes | bytearray user_data: The `user_data` ABI parameter
        :param list[tuple[bytes | bytearray, int]] box_references: The `box_references` ABI parameter
        :param list[int] app_references: The `app_references` ABI parameter
        :param list[int] asset_references: The `asset_references` ABI parameter
        :param list[str] account_references: The `account_references` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SendCustomOracleRequestArgs(
            request_type=request_type,
            request_key=request_key,
            sourceSpec=sourceSpec,
            destination_app_id=destination_app_id,
            destination_method=destination_method,
            aggregation_number=aggregation_number,
            user_data=user_data,
            box_references=box_references,
            app_references=app_references,
            asset_references=asset_references,
            account_references=account_references,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def send_offchain_oracle_request(
        self,
        *,
        request_type: int,
        request_key: bytes | bytearray,
        sourceSpec: list[tuple[int, int, bytes | bytearray, list[bytes | bytearray], bytes | bytearray, bytes | bytearray, int, int]],
        destination_app_id: int,
        destination_method: bytes | bytearray,
        aggregation_number: int,
        user_data: bytes | bytearray,
        box_references: list[tuple[bytes | bytearray, int]],
        app_references: list[int],
        asset_references: list[int],
        account_references: list[str],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Make an offchain oracle request with specified parameters.
        This type of request are requests sent to an off-chain service for results,
        
        Calls `send_offchain_oracle_request(uint64,byte[],(uint32,uint8,byte[],byte[][],byte[],byte[],uint32,uint32)[],uint64,byte[],uint32,byte[],(byte[],uint64)[],uint64[],uint64[],address[])void` ABI method
        
        :param int request_type: The `request_type` ABI parameter
        :param bytes | bytearray request_key: The `request_key` ABI parameter
        :param list[tuple[int, int, bytes | bytearray, list[bytes | bytearray], bytes | bytearray, bytes | bytearray, int, int]] sourceSpec: The `sourceSpec` ABI parameter
        :param int destination_app_id: The `destination_app_id` ABI parameter
        :param bytes | bytearray destination_method: The `destination_method` ABI parameter
        :param int aggregation_number: The `aggregation_number` ABI parameter
        :param bytes | bytearray user_data: The `user_data` ABI parameter
        :param list[tuple[bytes | bytearray, int]] box_references: The `box_references` ABI parameter
        :param list[int] app_references: The `app_references` ABI parameter
        :param list[int] asset_references: The `asset_references` ABI parameter
        :param list[str] account_references: The `account_references` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SendOffchainOracleRequestArgs(
            request_type=request_type,
            request_key=request_key,
            sourceSpec=sourceSpec,
            destination_app_id=destination_app_id,
            destination_method=destination_method,
            aggregation_number=aggregation_number,
            user_data=user_data,
            box_references=box_references,
            app_references=app_references,
            asset_references=asset_references,
            account_references=account_references,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def opt_in_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the opt_in bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.opt_in(
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
